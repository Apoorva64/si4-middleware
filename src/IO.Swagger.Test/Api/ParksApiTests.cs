/*
 * JcDecaux
 *
 * JcDecaux API
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using JCDECAUX.rest.client.Api;
using NUnit.Framework;

namespace IO.Swagger.Test.Api
{
    /// <summary>
    ///  Class for testing ParksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ParksApiTests
    {
        private ParksApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ParksApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ParksApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ParksApi
            //Assert.IsInstanceOfType(typeof(ParksApi), instance, "instance is a ParksApi");
        }

        /// <summary>
        /// Test GetPark
        /// </summary>
        [Test]
        public void GetParkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contractName = null;
            //int? parkNumber = null;
            //var response = instance.GetPark(contractName, parkNumber);
            //Assert.IsInstanceOf<Park> (response, "response is Park");
        }
        /// <summary>
        /// Test GetParks
        /// </summary>
        [Test]
        public void GetParksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contractName = null;
            //var response = instance.GetParks(contractName);
            //Assert.IsInstanceOf<List<Park>> (response, "response is List<Park>");
        }
    }

}
